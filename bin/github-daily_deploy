#!/usr/bin/env ruby
lib = File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require 'github/daily_deploy'
require 'slop'
require 'logger'
require 'dotenv'

unless Dir['./.env'].empty?
  Dotenv.load
end

option = Slop.parse do
  banner "Usage: github-daily_deploy --repository=REPOSITORY --root_dir=ROOT_DIR --deploy_branch==DEPLOY_BRANCH [--title=TITLE]"
  on "--root_dir=", "root dir of repositiory", as: String
  on "--deploy_branch=", "deploy branch repositiory", as: String
  on "--repository=", "deploy branch repositiory", as: String
  on "--title=", "pull request title format", as: String
end

params = option.to_hash
unless params[:root_dir] && params[:deploy_branch]
  puts option.banner
  exit 1
end

deploy = Github::DailyDeploy.new(
  root_dir: params[:root_dir],
  repository: params[:repository],
  logger: ::Logger.new(STDOUT)
)

unless deploy.is_cloned_repository
  result = deploy.checkout_repository
  exit(1) unless result
end

result = deploy.create_release_branch(params[:deploy_branch])
exit(1) unless result

if result
  deploy.logger.info('success create release branch')
else
  deploy.logger.error('failed create release branch')
  exit 1
end

args = {}
args[:deploy_branch] = params[:deploy_branch]
args[:title] = params[:title] if params[:title]
result = deploy.create(args)

if result
  deploy.logger.info('success create pull request')
end
